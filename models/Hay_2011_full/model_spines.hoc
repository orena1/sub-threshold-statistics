// An example of a template model file: (see Readme)
// 
// Notice the required declarations of sections - soma, dend, apic; the required declarations of section lists - somatic, apical, basal, all; 
// The function complete_full_model_creation() is required only in order to use the attached test script. To use subtree_reductor_func(), only the above declarations and an init() are required.

 
begintemplate model_spines

public init, biophys, geom_nseg, delete_axon, finish_creating_model_after_loading_morphology
public delete_spines,add_few_spines

public soma, dend, apic, axon,spine  // sections
public all, somatic, apical, axonal, basal,Spines // section lists
objref all, somatic, apical, axonal, basal, this,Spines

proc init() {
    all = new SectionList()
    somatic = new SectionList()
    basal = new SectionList()
    apical = new SectionList()
    axonal = new SectionList()
    Spines = new SectionList()

    forall delete_section()
    StepDist = 60 // human cells have no spines in their first 60 um
                                // from soma - see Benavides-Piccione 2013
    F_Spines = 1.9       //As calculated - see detailes in Eyal 2015
    
    CM =0.45	// uF/cm2
    RM = 38907
    RA = 203
    E_PAS =  -86
    
}

create soma[1], dend[1], apic[1], axon[1],spine[1]   

//external lambda_f
proc geom_nseg() {
    soma distance() 
    
    forsec all {
        RA_calc = RA
        RM_calc = RM*F_Spines
        if (distance(1)>StepDist){
            RA_calc = RA
            RM_calc = RM*F_Spines
        }
        d = diam
        lambda = sqrt(RM_calc/RA_calc*d/10000/4)*10000
        nseg = int(L/lambda*10/2)*2+1		
    }
}


proc biophys() {
    forsec all {
        insert pas
        cm =CM
        g_pas=1/RM
        Ra = RA
        e_pas = E_PAS
    }
  
    soma distance()
  
    forsec basal {	
        if (distance(0.5)>StepDist) {
            L = L*F_Spines^(2/3)
            diam = diam*(F_Spines^(1/3))
        }	
    }
    forsec apical {
        if (distance(0.5)>StepDist) {
            L = L*F_Spines^(2/3)
            diam = diam*(F_Spines^(1/3))
        }	
    }
}


proc delete_axon(){
    forsec axonal{delete_section()}
}


proc complete_full_model_creation() {
    geom_nseg()      		             // calculates num of segments
    delete_axon()		                     // deletes the axon
    biophys()			             // increases cell dimensions to account for spines
}


proc delete_spines(){
  forsec Spines{delete_section()}
}

// adding spines in the locations defined in sref_list in segment x_vec
proc add_few_spines(){localobj sref_list, x_vec,sref
  PI = 3.14159265359  
  sref_list = $o1
  x_vec = $o2
  neck_diam = $3
  neck_len = $4
  spine_head_area = $5
  ra = $6


  L_head = 2*sqrt(spine_head_area /4/PI) //sphere has the same surface area as cylinder with L=diam
                      //note that neorun don't include the bottom and the up of a cylinder in the area
                      // so 2*pi*r*h = pi*diam*Length = pi*diam^2 = pi*4*r^2
  diam_head = L_head
  create spine[2*sref_list.count()]
  for (j=0;j<sref_list.count();j+=1){

    sref = sref_list.o(j)
    shaft_x  = x_vec.x[j]
    spine[2*(j)]{
      L = neck_len
      diam = neck_diam
      insert pas
      cm =1
      g_pas=0.0000338 
      e_pas = -90
      Ra = ra
      Spines.append()
      all.append()

    }
    spine[2*(j)+1]{
      L = L_head
      diam = diam_head
      insert pas
      cm =1
      g_pas=0.0000338 
      e_pas = -90
      Ra = ra
      Spines.append()
      all.append()

    }
    connect  spine[2*(j)+1](0) ,spine[2*(j)](1)
    sref.sec{ 
      connect spine[2*(j)](0), shaft_x
    }
  

  }
  
}



endtemplate model_spines